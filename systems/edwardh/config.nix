{ config, inputs, ... }:
{
  imports = [
    (builtins.fetchTarball {
      # nixos-unstable as of 2025-04-07
      url = "https://gitlab.com/simple-nixos-mailserver/nixos-mailserver/-/archive/b4fbffe79c00f19be94b86b4144ff67541613659/nixos-mailserver-b4fbffe79c00f19be94b86b4144ff67541613659.tar.gz";
      sha256 = "0r8c0mkj7cn2cz0r6m45h51w5qwf2cyiiv956bz75p3fcps4qj1n";
    })
  ];

  networking.firewall.allowedTCPPorts = [
    80 # HTTP
    443 # HTTPS
    53 # DNS
    4243 # Automx2
    22 # SSH
  ];
  networking.firewall.allowedUDPPorts = [
    53 # DNS
    51800 # wg0
    51801 # wg1
    51802 # wg2
  ];
  networking.firewall.interfaces."wg0".allowedTCPPorts = [
    # Prometheus exporters
    9002
    9004
    9005
    9006
  ];

  services.fail2ban = {
    enable = true;
    bantime = "8h";
    bantime-increment = {
      enable = true;
      rndtime = "30m";
      maxtime = "168h";
    };
    jails = {
      sshd.settings = {
        enabled = true;
        mode = "aggressive";
      };
      dovecot.settings = {
        enabled = true;
        mode = "aggressive";
      };
      postfix.settings = {
        enabled = true;
        mode = "aggressive";
      };
    };
  };

  age.secrets.mail-hashed-password.file = ../../secrets/mail-hashed-password.age;
  age.secrets.radicale-htpasswd = {
    file = ../../secrets/radicale-htpasswd.age;
    owner = "radicale";
    group = "radicale";
    mode = "400";
  };
  age.secrets.wg0-edwardh-key.file = ../../secrets/wg0-edwardh-key.age;
  age.secrets.wg1-edwardh-key.file = ../../secrets/wg1-edwardh-key.age;
  age.secrets.wg2-edwardh-key.file = ../../secrets/wg2-edwardh-key.age;

  # Manually set DNS nameservers, to avoid trying to use our own non-recursive BIND service.
  environment.etc."resolv.conf".text = ''
    # Generated by NixOS
    domain dev
    search dev eu-west-2.compute.internal
    nameserver 172.16.10.1
    options edns0 trust-ad
  '';

  mailserver = {
    enable = true;
    localDnsResolver = false;

    fqdn = "mail.edwardh.dev";
    sendingFqdn = "edwardh.dev";
    domains = [ "edwardh.dev" ];

    backup.enable = true; # Backup to /var/rsnapshot

    loginAccounts = {
      "inbox@edwardh.dev" = {
        # mkpasswd -sm bcrypt
        hashedPasswordFile = config.age.secrets.mail-hashed-password.path;
        aliases = [ "@edwardh.dev" ];
        sieveScript = builtins.readFile ./mail.sieve;
      };
    };

    mailboxes = {
      # Special mailboxes
      Drafts = {
        auto = "subscribe";
        specialUse = "Drafts";
      };
      Junk = {
        auto = "subscribe";
        specialUse = "Junk";
      };
      Sent = {
        auto = "subscribe";
        specialUse = "Sent";
      };
      Trash = {
        auto = "subscribe";
        specialUse = "Trash";
      };
      Archives = {
        auto = "subscribe";
        specialUse = "Archive";
      };

      "Organizations.AbuseIPDB" = { auto = "subscribe"; };
      "Organizations.Airtable" = { auto = "subscribe"; };
      "Organizations.Apple" = { auto = "subscribe"; };
      "Organizations.BAFTA" = { auto = "subscribe"; }; # not autosorted
      "Organizations.Bluesky" = { auto = "subscribe"; };
      "Organizations.GitHub" = { auto = "subscribe"; }; # sorted via sender
      "Organizations.Google" = { auto = "subscribe"; };
      "Organizations.Hack Club" = { auto = "subscribe"; };
      "Organizations.Immobilise" = { auto = "subscribe"; };
      "Organizations.Itch" = { auto = "subscribe"; };
      "Organizations.JLCPCB" = { auto = "subscribe"; };
      "Organizations.LNER" = { auto = "subscribe"; };
      "Organizations.Meta" = { auto = "subscribe"; };
      "Organizations.Microsoft" = { auto = "subscribe"; };
      "Organizations.Modrinth" = { auto = "subscribe"; };
      "Organizations.NASA" = { auto = "subscribe"; };
      "Organizations.Obsidian" = { auto = "subscribe"; };
      "Organizations.PCBWay" = { auto = "subscribe"; }; # sorted via sender
      "Organizations.PCBX" = { auto = "subscribe"; }; # sorted via sender
      "Organizations.Prusa" = { auto = "subscribe"; };
      "Organizations.Ubisoft" = { auto = "subscribe"; };
      "Organizations.Steam" = { auto = "subscribe"; };
      "Organizations.ThePiHut" = { auto = "subscribe"; };

      "Shipping and Recipts" = { auto = "subscribe"; };
      "School" = { auto = "subscribe"; };
      "Performances" = { auto = "subscribe"; };
      "Music" = { auto = "subscribe"; };
      "Security" = { auto = "subscribe"; }; # LetsEncrypt

      # Forwarded from my old email address
      "headblockhead" = { auto = "subscribe"; };
    };

    certificateScheme = "acme-nginx";
  };

  services.roundcube = {
    enable = true;
    # Web interface accessible from hostName.
    hostName = "mail.edwardh.dev";
    extraConfig = ''
      $config['smtp_server'] = "tls://${config.mailserver.fqdn}";
      $config['smtp_user'] = "%u";
      $config['smtp_pass'] = "%p";
    '';
  };

  services.automx2 = {
    enable = true;
    domain = "edwardh.dev";
    port = 4243;
    # https://rseichter.github.io/automx2/#_sqlite
    settings =
      {
        provider = "Edward Hesketh";
        domains = [ "edwardh.dev" ];
        servers = [
          { type = "imap"; name = "mail.edwardh.dev"; }
          { type = "smtp"; name = "mail.edwardh.dev"; }
          { type = "caldav"; port = 443; url = "https://calendar.edwardh.dev/SOGo/dav/%EMAILADDRESS%/Calendar/personal/"; }
          { type = "carddav"; port = 443; url = "https://contacts.edwardh.dev/SOGo/dav/%EMAILADDRESS%/Contacts/personal/"; }
        ];
      };
  };

  services.radicale = {
    enable = true;
    settings = {
      server.hosts = [ "127.0.0.1:5232" ];
      auth = {
        type = "htpasswd";
        htpasswd_filename = config.age.secrets.radicale-htpasswd.path;
        htpasswd_encryption = "bcrypt";
      };
    };
  };

  # Store zones in /etc so they can be signed without errors due to trying to write to the store.
  systemd.tmpfiles.rules = [
    "d /etc/bind/zones 755 named root -"
    "L+ /etc/bind/zones/db.edwardh.dev - - - - ${./db.edwardh.dev}"
    "z /etc/bind/zones/db.edwardh.dev 744 named root -"
  ];

  services.bind = {
    enable = true;
    extraOptions = ''
      recursion no;
      allow-transfer { none; };
      version "not currently available";
    '';
    zones."edwardh.dev" = {
      master = true;
      file = "/etc/bind/zones/db.edwardh.dev";
      allowQuery = [ "any" ];
      # To get DS record:
      # dig dnskey edwardh.dev | dnssec-dsfromkey -f - edwardh.dev
      extraConfig = ''
        dnssec-policy default;
        inline-signing yes;

        # ${./db.edwardh.dev}
        # The above comment is included so that the bind service will be restarted when the db.edwardh.dev file changes, by including the nix-store path of the file in bind's config.
      '';
    };
  };

  services.prometheus.exporters.bind = {
    enable = true;
    port = 9004;
    listenAddress = "172.16.10.2";
  };

  networking.wireguard = {
    enable = true;
    interfaces = {
      wg0 = {
        ips = [ "172.16.10.2/24" ];
        listenPort = 51800;
        privateKeyFile = config.age.secrets.wg0-edwardh-key.path;
        peers = [
          {
            name = "gateway";
            publicKey = "1Gs85rAE+d++lojXtc04P448bXcZNdLZjIx/uWo0pSM=";
            allowedIPs = [ "172.16.0.0/12" ]; # edwardh can connect to server network
          }
        ];
      };
      wg1 = {
        ips = [ "172.16.11.2/24" ];
        listenPort = 51801;
        privateKeyFile = config.age.secrets.wg1-edwardh-key.path;
        peers = [
          {
            name = "gateway";
            publicKey = "N/BghPeRn6f2FbeW7fhh1WR3dd5rdsirfM+Otplxu1k=";
            allowedIPs = [ "172.16.11.1/32" ]; # edwardh can connect to gateway
          }
          {
            name = "edward-laptop-01";
            publicKey = "cc9joB4JjXNuM5mIeyjN9wsr2NF6fY6DfDqca29jNxA=";
            allowedIPs = [ "172.16.11.10/32" ];
          }
        ];
      };
      wg2 = {
        ips = [ "172.16.12.2/24" ];
        listenPort = 51802;
        privateKeyFile = config.age.secrets.wg2-edwardh-key.path;
        peers = [
          {
            name = "gateway";
            publicKey = "wktxkYndiWThccdNLRXmaFYupDP6Yhb+J584zgz1u2Y=";
            allowedIPs = [ "172.16.12.1/32" ]; # edwardh can connect to gateway
          }
          {
            name = "edward-laptop-01";
            publicKey = "pTSih86eiTD0SlcYiHXX7CagDZT3/FKpmcgCz4DzsUg=";
            allowedIPs = [ "172.16.12.10/32" ];
          }
        ];
      };
    };
  };

  services.prometheus.exporters.wireguard = {
    enable = true;
    port = 9006;
    listenAddress = "172.16.10.2";

    withRemoteIp = true; # Show the remote IP address of the peer
  };

  security.acme.acceptTerms = true;
  security.acme.defaults.email = "security@edwardh.dev";

  services.nginx = {
    enable = true;
    statusPage = true; # localhost only, used by prometheus exporter
    appendHttpConfig = ''
      map $sent_http_content_type $expires {
        default                    off;
        text/html                  epoch;
        text/css                   max;
        application/javascript     max;
        ~image/                    max;
        ~font/                     max;
      }
    '';
    virtualHosts = {
      "edwardh.dev" = {
        default = true;
        forceSSL = true;
        enableACME = true;
        locations = {
          "/" = {
            root = inputs.edwardh-dev.packages.edwardh-dev;
            extraConfig = ''
              gzip on;
              gzip_types text/html text/css;
              etag on;
              expires $expires;
            '';
          };
        };
      };
      "calendar.edwardh.dev" = {
        forceSSL = true;
        enableACME = true;
        serverAliases = [ "contacts.edwardh.dev" ];
        locations."/" = {
          proxyPass = "http://127.0.0.1:5232";
          recommendedProxySettings = true;
        };
      };
      # Local services
      "cache.edwardh.dev" = {
        forceSSL = true;
        enableACME = true;
        locations."/" = {
          proxyPass = "http://172.16.3.51"; # rpi5-01
          recommendedProxySettings = true;
        };
      };
      "grafana.edwardh.dev" = {
        forceSSL = true;
        enableACME = true;
        locations."/" = {
          proxyPass = "http://172.16.3.1:3000"; # gateway
          proxyWebsockets = true;
          recommendedProxySettings = true;
        };
      };
      "hass.edwardh.dev" = {
        forceSSL = true;
        enableACME = true;
        locations."/" = {
          proxyPass = "http://172.16.3.41:8123"; # rpi4-01
          proxyWebsockets = true;
          recommendedProxySettings = true;
        };
      };
    };
  };

  services.prometheus.exporters.nginx = {
    enable = true;
    port = 9005;
    listenAddress = "172.16.10.2";
  };
}
